#!/usr/bin/env perl

my $PROGID = 'knotinframe';

sub getPath {
	my ($url) = @_;
	my @parts = split(m|/|, $url);
	pop @parts;
	unshift @parts, "./" if (@parts == 0);
	return join('/', @parts).'/';
}

use lib getPath($0)."../lib/";

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use foldGrammars::Utils;
use foldGrammars::Settings;
use foldGrammars::RNAcast;
use foldGrammars::IO;
use POSIX 'isatty';

our @ALLMODES = ($Settings::MODE_KIF);
@References::ORDER = ('lor:ber:sie:taf:fla:sta:hof:2011','the:jan:gie:2010','tur:mat:2009','mat:dis:chi:schroe:zuk:tur:2004','the:ree:gie:2008','jan:gie:2014');

my %PARAM;

$PARAM{mode} = {modes => \@ALLMODES, key => 'mode', type => 's', default => $Settings::MODE_KIF, info => "Select the computation mode. Available modes are \"".join('", "', @ALLMODES)."\". Omit the ticks on input.\nDefault is \"@(DEFAULT)\"."};
$PARAM{windowsize} = {modes => \@ALLMODES, key => 'windowSize', type => 'i', gapc => undef, default => 120, info => "If a slippery site is detected a sub-string downstream is analysed. --@(windowsize) sets the maximal length of this sub-string, which is @(DEFAULT) by default. Must be a multiple of --@(windowincrement)!"};
$PARAM{windowincrement} = {modes => \@ALLMODES, key => 'windowIncrement', gapc => undef, type => 'i', default => 20, info => "The --@(windowsize) bp long sub-string, downstream to the slippery site, is analysed in different chunks sizes. These chunks grow with --@(windowincrement) bp. Maximal size if --@(windowsize). Default value is @(DEFAULT)."};
$PARAM{temperature} = {modes => \@ALLMODES, key => 'temperature', gapc => 'T', type => 'f', default => 37, info => "Rescale energy parameters to a temperature of temp C.\n<float> must be a floating point number.\nDefault is @(DEFAULT) C."};
$PARAM{param} = {modes => \@ALLMODES, key => 'param', gapc => 'P', type => 's', default => undef, infoType => "paramfile", info => "Read energy parameters from paramfile, instead of using the default parameter set. See the RNAlib (Vienna RNA package) documentation for details on the file format.\nDefault are parameters released by the Turner group in 2004 (see [".References::getNumber('mat:dis:chi:schroe:zuk:tur:2004')."] and [".References::getNumber('tur:mat:2009')."])."};
$PARAM{numberoutputs} = {modes => \@ALLMODES, key => 'numberOutputs', gapc => undef, type => 'i', default => 10, info => "Some sequences have a high amount of possible slippery site candidates, thus output is cut off after printing the best --@(numberoutputs) results, which is @(DEFAULT) by default."};
$PARAM{minknottedenergy} = {modes => \@ALLMODES, key => 'minKnottedEnergy', gapc => undef, type => 'f', default => -7.4, info => "The pseudoknot structure induces the ribosomal frame shift, thus it should have a stability of at least @(DEFAULT) kcal/mol. Theis et al. [".References::getNumber('the:ree:gie:2008')."] call this the \"low energy filter (LEF)\" and the parameter \"alpha\"."};
$PARAM{minenergydifference} = {modes => \@ALLMODES, key => 'minEnergyDifference', gapc => undef, type => 'f', default => -8.71, info => "The candidate sub-sequence should be more likely fold a pseudoknot than a nested structure. Thus, candidates where (nested energy + --@(minenergydifference) < knotted energy) are ruled out. Theis et al. [".References::getNumber('the:ree:gie:2008')."] call this the \"energy difference filter (EDF)\" and the according parameter \"beta\". Default is @(DEFAULT) kcal/mol."};
$PARAM{help} = {modes => \@ALLMODES, key => 'help', default => undef, info => "show this brief help on version and usage"};
$PARAM{binarypath} = {modes => \@ALLMODES, key => 'binPath', type => 's', default => undef, info => $Settings::PROGINFOS{$PROGID}->{name}." expects that according Bellman's GAP compiled binaries are located in the same directory as the Perl wrapper is. Should you moved them into another directory, you must set --@(binarypath) to this new location!"};
$PARAM{binaryprefix} = {modes => \@ALLMODES, key => 'binPrefix', type => 's', default => $Settings::PROGINFOS{$PROGID}->{name}.'_', info => $Settings::PROGINFOS{$PROGID}->{name}." expects a special naming schema for the according Bellman's GAP compiled binaries. The binary name is composed of two components:\n  1) the program prefix (on default \"@(DEFAULT)\"),\n  2) the folding mode, i.e. \"knotted\" or \"nested\".\n.\nWith --@(binaryprefix) you can change the prefix into some arbitary one."};
$PARAM{verbose} = {modes => \@ALLMODES, key => 'verbose', default => 0, type => 'i', info => "Prints the actual command for Bellman's GAP binary."};
$PARAM{varnaoutput} = {modes => \@ALLMODES, key => 'varna', default => undef, type => 's', info => "Provide a file name to which a HTML formatted version of the output should be saved in."};

my $settings = {};
foreach my $param (keys %PARAM) {
	$settings->{$param} = $PARAM{$param}->{default};
}
my %help = ();
foreach my $param (keys %PARAM) {
	my $optionSec = $PARAM{$param}->{key};
	$optionSec .= "=".$PARAM{$param}->{type} if (exists $PARAM{$param}->{type});
	$help{$optionSec} = \$settings->{$param};
}
&GetOptions( 	
	%help
);


checkParameters($settings, \%PARAM);

usage() if (defined $settings->{'help'}); #user asks for help --> print usage and die
our $inputIndex = 0;
if (@ARGV == 0) {
	#input not given via command line parameter
	if (isatty(*STDIN)) {
		#we are somehow in an interactive mode
		#expecting a sequence or a filename
		print "Please give me either your RNA sequence, or a (multiple) FASTA file, containing your sequences:\n";
		my $input = <STDIN>; chomp $input;
		if (-e $input) {
			#since there is a file, having the name of the user input it is very likely that we really should read from a file
			processInput($input, $settings);
		} else {
			#otherwise, we assume it is a single, plain RNA sequence
			processInput({sequence => $input, header => "unnamed sequence"}, $settings);
		}
	} else {
		#input must be delivered via pipe
		processInput(\*STDIN, $settings);
	}
} elsif (@ARGV == 1) {
	#rna sequence, secondary structure or filename, given as command line parameter
	if (-e $ARGV[0]) {
		#since there is a file, having the name of the user input it is very likely that we really should read from a file
		processInput($ARGV[0], $settings);
	} else {
		#otherwise, we assume it is a single, plain RNA sequence or a 2D structure
		processInput({sequence => $ARGV[0], header => "unnamed sequence"}, $settings);
	}
} else {
	print STDERR "You gave me too many inputs. Please ask for help, via \"".$Settings::PROGINFOS{$PROGID}->{name}." --".$PARAM{help}->{key}."\".\n";
	exit(1);
}

sub processInput {
	my ($input, $refHash_settings) = @_;
	
	if (ref($input) =~ m/HASH/) {
		#input is a sequence
		doComputation($input, $refHash_settings);
	} elsif (ref($input) =~ m/GLOB/) {
		#input is STDIN
		Utils::applyFunctionToFastaFile(\*STDIN, \&doComputation, $refHash_settings);
	} else {
		#input is a filename
		die "The file '$input' does not exist!\n" if (not -e $input);
		Utils::applyFunctionToFastaFile($input, \&doComputation, $refHash_settings);
	}
	IO::writeVarna($refHash_settings);
}

sub doComputation {
	my ($refHash_sequence, $settings) = @_;

	$inputIndex++;
	
	if ($refHash_sequence->{sequence} !~ m/^\s*((A|C|G|U|T)+)\s*$/i) {
		print STDERR "sequence '".$refHash_sequence->{header}."' has been skipped, due to non RNA letter. Only A,C,G,U,T,a,c,g,u,t are allowed.";
	}

	kif($refHash_sequence, $settings);	

	return undef;
}

sub kif {
	my %CODONS = (
		'start', ['AUG'],
		'stop', ['UAA','UGA','UAG'],
	);
	
	my ($refHash_sequence, $settings) = @_;
	
	my $seq = uc($refHash_sequence->{sequence});
	$seq =~ s/T/U/g;

	#a bit of preprocessing to find all start and stop codons and store them in a hash ordered by their absolute frame (i.e. relative to start of input sequence)
		my %specialCodonPositions = ();
		foreach my $codonType (keys(%CODONS)) {
			foreach my $frame (0,1,2) {
				$specialCodonPositions{$codonType}->{$frame} = [];
			}
			my $regex = '(?:'.join('|',@{$CODONS{$codonType}}).')';
			while ($seq =~ m/($regex)/g) {
				my $frame = $-[0] % 3;
				push @{$specialCodonPositions{$codonType}->{$frame}}, $-[0];
			}
		}
	
	my %candidates = ();
	while ($seq =~ m/(?=([A,G,C,U,T]{1})\1\1([A,U,T]{1})\2\2([A,G,C,U,T]{1}))/gi) { #search phase: search for slippery sites of pattern XXXYYYZ (where X and Z stand for arbitray nucleotides but Y must be A,T or U
		my $slipperyStart = $-[0];
		my $slipperyFrame = ($slipperyStart % 3)+1;
		$slipperyFrame = 0 if ($slipperyFrame >= 3);

		#application of "inframe stopcodon filter": omit slippery site iff we find an upstream inframe stop codon. That is revoked iff there is another upstream inframe startcodon between found stop codon and slippery site
			my $ISF_ruleout = 'false';
			foreach my $stopCodonPos (sort {$b <=> $a} @{$specialCodonPositions{'stop'}->{$slipperyFrame}}) {
				next if ($stopCodonPos+3 >= $slipperyStart);
				$ISF_ruleout = 'true'; #rule slippery sequence out, because we found an upstream inframe stop codon
				foreach my $startCodonPos (@{$specialCodonPositions{'start'}->{$slipperyFrame}}) {
					next if ($startCodonPos <= $stopCodonPos);
					last if ($startCodonPos+3 >= $slipperyStart);
					$ISF_ruleout = 'false'; #reconsidere ruling out, because we also found another upstream inframe start codon.
					last;
				}
				last; #just check the one stopcodon that is directly in front of the slippery site. Don't check for further upstream ones.
			}
			next if ($ISF_ruleout eq 'true');

		#folding with pseudoknot and nested MFE program
			my @slipperySiteCandidates = ();
			for (my $windowLength = $settings->{'windowincrement'}; $windowLength <= $settings->{'windowsize'}; $windowLength += $settings->{'windowincrement'}) {
				last if ($windowLength > length($seq)-$slipperyStart-7);
				my $candidateSequence = substr($seq, $slipperyStart+7, $windowLength);
				my %foldings = ();
				foreach my $task ('nested','knotted') {
					my $command = buildCommand($settings, $task);
					print "Actual call was: $command \"$candidateSequence\"\n" if ($settings->{verbose});
					my $inputFile = Utils::writeInputToTempfile($candidateSequence);
					my $result = Utils::execute("$command -f $inputFile 2>&1");
					Utils::execute(Settings::getBinary('rm')." -f $inputFile") if (!$settings->{verbose});
					foreach my $line (split(m/\n/, $result)) {
						if ($line =~ m/^\( (.+?) , (.+?) \)$/) {
							$foldings{$task} = {energy => $1/100, structure => $2};
							last;
						}
					}
				}
				next if ($foldings{'knotted'}->{energy} > $settings->{'minknottedenergy'}); #this is the LEF (low energy filter) filter, ruling out candidates whose pseudoknot energy is too high
				next if ($foldings{'nested'}->{energy} - $settings->{'minenergydifference'} < $foldings{'knotted'}->{energy}); #this is the EDF (energy difference filter) filter, ruling out candidates where energy difference between nested and knotted structures are too close, i.e. a nested structure is more likely
				
				push @slipperySiteCandidates, \%foldings;
			}

		#NDF (normalized dominance filter): not really filtering out something, but sorting it according to the two criteria: 1. length normalized energy difference and 2. knotted energy. Only the topmost candidate is taken
			@slipperySiteCandidates = sort {(lengthNormalizedEnergy($b) <=> lengthNormalizedEnergy($a)) || ($a->{knotted}->{energy} <=> $b->{knotted}->{energy})} @slipperySiteCandidates;
			if (@slipperySiteCandidates > 0) {
				push @{$candidates{lengthNormalizedEnergy($slipperySiteCandidates[0])}->{$slipperySiteCandidates[0]->{knotted}->{energy}}}, {slippery => {site => substr($refHash_sequence->{sequence}, $slipperyStart, 7), position => $slipperyStart}, foldings => $slipperySiteCandidates[0]};
			}
	}
	output($refHash_sequence, \%candidates);
	if ($settings->{varnaoutput}) {
		if (($settings->{mode} ne $Settings::MODE_ABSTRACT) && ($settings->{mode} ne $Settings::MODE_OUTSIDE)) {
			outputVARNA($refHash_sequence, \%candidates);
		}
	}

}

sub output {
	my ($refHash_sequence, $refHash_candidates) = @_;
	
	#output results, sorted first by length normalized energy and then by energy of the knotted structure. Output is stopped after $settings->{numberoutputs} results have been printed
	my $output = 'new';
	if ($output eq 'new') {
		print ">".$refHash_sequence->{header}."\n";
		my $rank = 1;
		my $quit = 'false';
		if (keys(%{$refHash_candidates}) <= 0) {
			print "No suitable slippery sites have been detected.\n";
		} else {
			my $maxLeftLen = 0;
			my $formatEnergy = "%.2f";
			foreach my $lenNormEnergy (sort {$b <=> $a} keys(%{$refHash_candidates})) {
				foreach my $knotEnergy (sort {$a <=> $b} keys(%{$refHash_candidates->{$lenNormEnergy}})) {
					foreach my $candidate (@{$refHash_candidates->{$lenNormEnergy}->{$knotEnergy}}) {
						my $value = undef;
						foreach my $type ('nested','knotted') {
							$value = length(sprintf($formatEnergy, $candidate->{foldings}->{$type}->{energy}));
							$maxLeftLen = $value if ($value > $maxLeftLen);
						}
						$value = length(($candidate->{slippery}->{position}+1)+7+length($candidate->{foldings}->{knotted}->{structure}));
						$maxLeftLen = $value if ($value > $maxLeftLen);
					}
				}
			}
			
			foreach my $lenNormEnergy (sort {$b <=> $a} keys(%{$refHash_candidates})) {
				foreach my $knotEnergy (sort {$a <=> $b} keys(%{$refHash_candidates->{$lenNormEnergy}})) {
					foreach my $candidate (@{$refHash_candidates->{$lenNormEnergy}->{$knotEnergy}}) {
						my @infos = ();
						push @infos, {'Rank' => $rank};
						push @infos, {'Slippery sequence' => $candidate->{slippery}->{site}};
						push @infos, {'Slippery position' => ($candidate->{slippery}->{position}+1)};
						push @infos, {'Substring length' => length($candidate->{foldings}->{knotted}->{structure})};
						push @infos, {'Deltarel' => sprintf("%.3f", IO::roundFloat($lenNormEnergy,3))};
						
						my $maxLen = 0;
						foreach my $refHash_info (@infos) {
							foreach my $key (keys(%{$refHash_info})) {
								$maxLen = length($key) if (length($key) > $maxLen);
							}
						}
						foreach my $refHash_info (@infos) {
							foreach my $key (keys(%{$refHash_info})) {
								print $IO::SEPARATOR.$key.":".(" " x ($maxLen - length($key)))." ".$refHash_info->{$key}."\n";
							}
						}
						my $text = ($candidate->{slippery}->{position}+1+7);
						print $IO::SEPARATOR.(" " x ($maxLeftLen - length($text))).$text.$IO::SEPARATOR.substr($refHash_sequence->{sequence}, $candidate->{slippery}->{position}+7, length($candidate->{foldings}->{knotted}->{structure})).$IO::SEPARATOR.(($candidate->{slippery}->{position}+1)+7+length($candidate->{foldings}->{knotted}->{structure}))."\n";
						
						$text = sprintf($formatEnergy, $candidate->{foldings}->{knotted}->{energy});
						print $IO::SEPARATOR.(" " x ($maxLeftLen - length($text))).$text.$IO::SEPARATOR.$candidate->{foldings}->{knotted}->{structure}.$IO::SEPARATOR."knotted structure"."\n";
						
						$text = sprintf($formatEnergy, $candidate->{foldings}->{nested}->{energy});
						print $IO::SEPARATOR.(" " x ($maxLeftLen - length($text))).$text.$IO::SEPARATOR.$candidate->{foldings}->{nested}->{structure}.$IO::SEPARATOR."nested structure"."\n";
						
						if ($rank >= $settings->{numberoutputs}) {
							print "\n".$IO::SEPARATOR."Warning: some further results are not shown. Increase --".$PARAM{numberoutputs}->{key}." to display them!\n";
							$quit = 'true';
							last;
						}
						print "\n";
						if ($candidate->{foldings}->{knotted}->{energy} > $candidate->{foldings}->{nested}->{energy}) {
							$quit = 'true';
							last;
						}
						$rank++;
					}
					last if ($quit eq 'true');
				}
				last if ($quit eq 'true');
			}
		}
	} else {
		print STDOUT "The ".$settings->{numberoutputs}." best results (if list of slippery-sequences containes enough entries, else less!)\n\n\n";
		print STDOUT  "Sequence name:  ".$refHash_sequence->{header}."\n\n\n";
		my $rank = 1;
		my $quit = 'false';
		foreach my $lenNormEnergy (sort {$b <=> $a} keys(%{$refHash_candidates})) {
			foreach my $knotEnergy (sort {$a <=> $b} keys(%{$refHash_candidates->{$lenNormEnergy}})) {
				foreach my $candidate (@{$refHash_candidates->{$lenNormEnergy}->{$knotEnergy}}) {
					print STDOUT $rank.".    Slippery sequence:       ".$candidate->{slippery}->{site}."\n";
					print STDOUT      "      Slippery position:       ".($candidate->{slippery}->{position}+1)."\n";
					print STDOUT      "      MFE pknotsRG-fs (v2.00): ".sprintf("%.1f", $candidate->{foldings}->{knotted}->{energy})." kcal/mol\n";
					print STDOUT      "      MFE RNAfold:             ".sprintf("%.1f", $candidate->{foldings}->{nested}->{energy})." kcal/mol\n";
					print STDOUT      "      Substring length:        ".length($candidate->{foldings}->{knotted}->{structure})."\n";
					print STDOUT      "      Deltarel:   ".sprintf("%.3f", $lenNormEnergy)."\n";
					print STDOUT      "      Substring sequence and MFE structure of pseudoknot:\n";
					print STDOUT      "      ".substr($refHash_sequence->{sequence}, $candidate->{slippery}->{position}+7, length($candidate->{foldings}->{knotted}->{structure}))."\n";
					print STDOUT      "      ".$candidate->{foldings}->{knotted}->{structure}."\n\n\n";
					$rank++;
					$quit = 'true' if (($rank > $settings->{numberoutputs}) || ($candidate->{foldings}->{knotted}->{energy} > $candidate->{foldings}->{nested}->{energy}));
					last if ($quit eq 'true');
				}
				last if ($quit eq 'true');
			}
			last if ($quit eq 'true');
		}
		print STDOUT "\n\n\n";
	}
}
sub outputVARNA {
	my ($refHash_sequence, $refHash_candidates) = @_;
	
	if ($IO::hasVarnaHeader eq 'false') {
		$IO::varnaoutput .= IO::getVARNAheader();
		$IO::hasVarnaHeader = 'true';
	}
	$IO::varnaoutput .= "\t\t".$IO::tableStart."\n";
	
	#output results, sorted first by length normalized energy and then by energy of the knotted structure. Output is stopped after $settings->{numberoutputs} results have been printed
	$IO::varnaoutput .= "\t\t\t<tr><td colspan='2'>&gt;".$refHash_sequence->{header}."</td></tr>\n";
	my $rank = 1;
	my $quit = 'false';
	if (keys(%{$refHash_candidates}) <= 0) {
		$IO::varnaoutput .= "\t\t\t<tr><td>&#160;</td><td>No suitable slippery sites have been detected.</td></tr>\n";
	} else {
		my $formatEnergy = "%.2f";
		
		foreach my $lenNormEnergy (sort {$b <=> $a} keys(%{$refHash_candidates})) {
			foreach my $knotEnergy (sort {$a <=> $b} keys(%{$refHash_candidates->{$lenNormEnergy}})) {
				foreach my $candidate (@{$refHash_candidates->{$lenNormEnergy}->{$knotEnergy}}) {
					$IO::varnaoutput .= "\t\t\t<tr><td>&#160;</td><td>\n\t\t\t\t<table>\n";
					my @infos = ();
					push @infos, {'Rank' => $rank};
					push @infos, {'Slippery sequence' => $candidate->{slippery}->{site}};
					push @infos, {'Slippery position' => ($candidate->{slippery}->{position}+1)};
					push @infos, {'Substring length' => length($candidate->{foldings}->{knotted}->{structure})};
					push @infos, {'Deltarel' => sprintf("%.3f", $lenNormEnergy)};
					
					foreach my $refHash_info (@infos) {
						foreach my $key (keys(%{$refHash_info})) {
							$IO::varnaoutput .= "\t\t\t\t\t<tr><td>".$key.":</td><td>".$refHash_info->{$key}."</td></tr>\n";
						}
					}
					$IO::varnaoutput .= "\t\t\t\t</table>\n\t\t\t</td></tr>\n";
					
					$IO::varnaoutput .= "\t\t\t<tr><td>&#160;</td><td>\n\t\t\t\t<table>\n";
					my $text = ($candidate->{slippery}->{position}+1+7);
					my $subsequence = substr($refHash_sequence->{sequence}, $candidate->{slippery}->{position}+7, length($candidate->{foldings}->{knotted}->{structure}));
					$IO::varnaoutput .= "\t\t\t\t\t<tr><td style='text-align: right;'>".$text."</td><td>".$subsequence."</td><td>".(($candidate->{slippery}->{position}+1)+7+length($candidate->{foldings}->{knotted}->{structure}))."</td></tr>\n";
					
					$text = sprintf($formatEnergy, $candidate->{foldings}->{knotted}->{energy});
					$IO::varnaoutput .= "\t\t\t\t\t<tr class='result'><td style='text-align: right;'>".$text."</td><td><a href='javascript:void(0);' class='structure' onClick='setStructSmooth(\"".$subsequence."\",\"".$candidate->{foldings}->{knotted}->{structure}."\",\"".$refHash_sequence->{header}."\");'>".$candidate->{foldings}->{knotted}->{structure}."</a></td><td>knotted structure</td></tr>\n";
					
					$text = sprintf($formatEnergy, $candidate->{foldings}->{nested}->{energy});
					$IO::varnaoutput .= "\t\t\t\t\t<tr class='result'><td style='text-align: right;'>".$text."</td><td><a href='javascript:void(0);' class='structure' onClick='setStructSmooth(\"".$subsequence."\",\"".$candidate->{foldings}->{nested}->{structure}."\",\"".$refHash_sequence->{header}."\");'>".$candidate->{foldings}->{nested}->{structure}."</a></td><td>nested structure</td></tr>\n";
					
					$quit = 'true' if (($rank > $settings->{numberoutputs}) || ($candidate->{foldings}->{knotted}->{energy} > $candidate->{foldings}->{nested}->{energy}));
					if ($quit eq 'true') {
						$IO::varnaoutput .= "\t\t\t\t\t<tr><td>&#160;</td></tr><tr><td colspan='3'>Warning: some further results are not shown. Increase --".$PARAM{numberoutputs}->{key}." to display them!</td></tr>\n";
						$IO::varnaoutput .= "\t\t\t\t</table>\n\t\t\t</td></tr>\n";
						last;
					}
					$IO::varnaoutput .= "\t\t\t\t</table>\n\t\t\t</td></tr>\n";
					$rank++;
				}
				last if ($quit eq 'true');
			}
			last if ($quit eq 'true');
		}
	}
	$IO::varnaoutput .= "\t\t</table>\n";
}

sub lengthNormalizedEnergy {
	my ($refHash_foldings) = @_;
	return ($refHash_foldings->{nested}->{energy} - $refHash_foldings->{knotted}->{energy}) / length($refHash_foldings->{knotted}->{structure});
}

sub buildCommand {
	my ($settings, $task) = @_;

	my $cmd = "";
	$cmd .= $settings->{'binarypath'};
	$cmd .= "/" if (substr($cmd, -1, 1) ne "/");
	$cmd .= $settings->{'binaryprefix'};
	$cmd .= $task;
	$cmd .= " -".$PARAM{temperature}->{gapc}." ".$settings->{'temperature'} if ($settings->{'temperature'} != $PARAM{temperature}->{default});
	$cmd .= " -".$PARAM{param}->{gapc}." ".$settings->{'param'} if (defined $settings->{'param'});
	
	return $cmd;
}

sub checkParameters {
	my ($settings, $refHash_params) = @_;
	
	my $diePrefix = "wrong command line parameter:\n  ";
	
	Utils::automatedParameterChecks(\%PARAM, $settings, \@ALLMODES, $diePrefix);
	Utils::checkBinaryPresents($settings, $diePrefix, [$Settings::MODE_KIF], ['knotted', 'nested'], $refHash_params);

	die $diePrefix."--".$PARAM{'windowsize'}->{key}." must be a positive integer!\n" if ((defined $settings->{'windowsize'}) && ($settings->{'windowsize'} < 1));
	die $diePrefix."--".$PARAM{'windowsize'}->{key}." is smaller than --".$PARAM{'windowincrement'}->{key}." !\n" if ((defined $settings->{'windowsize'}) && ($settings->{'windowsize'} < $settings->{'windowincrement'}));
	die $diePrefix."the parameter file you specified could not be found.\n" if ((defined $settings->{'param'}) && (not -e $settings->{'param'}));
	die $diePrefix."--".$PARAM{'numberoutputs'}->{key}." must be a positive integer number, otherwise you would get no results!\n" if ((defined $settings->{'numberoutputs'}) && ($settings->{'numberoutputs'} < 1));
}

sub usage {
	my ($settings) = @_;

my $HELP = <<EOF;
# $Settings::PROGINFOS{$PROGID}->{name}: predict ribosomal -1 frameshift sites
#              version $Settings::PROGINFOS{$PROGID}->{version} ($Settings::PROGINFOS{$PROGID}->{date})
#              Stefan Janssen (bibi-help\@techfak.uni-bielefeld.de)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

USAGE: 
perl $Settings::PROGINFOS{$PROGID}->{name} [-options] <fasta file name or RNA sequence>

EOF
;

	$HELP .= Utils::printIdent("  ", $Settings::PROGINFOS{$PROGID}->{name}." is a pipeline to predict ribosomal -1 frameshift sites with a simple pseudoknot as secondary structure in DNA and RNA sequences. The prediction is based on a comparison between the minimal free energy (mfe) structure calculated by an RNAfold [".References::getNumber('lor:ber:sie:taf:fla:sta:hof:2011')."] like program and the mfe-structure computed by a modified version of pKiss, called pknotsRG-frameshift [".References::getNumber('the:jan:gie:2010')."].")."\n";
	
	my @paramGroups = ();
	push @paramGroups, {name => 'GENERAL OPTIONS', elements => [ 'numberoutputs','windowsize','windowincrement','minknottedenergy','minenergydifference']};
	push @paramGroups, {name => 'FOLDING OPTIONS', elements => ['temperature','param']};
	push @paramGroups, {name => 'SYSTEM OPTIONS', elements => ['binarypath','binaryprefix','help','verbose','varnaoutput']};
	foreach my $refHash_group (@paramGroups) {
		$HELP .= $refHash_group->{name}.":\n";
		for my $par (@{$refHash_group->{elements}}) {
			$HELP .= Utils::printParamUsage($PARAM{$par}, \%PARAM, \@ALLMODES)."\n";
		}
	}
	
	$HELP .= "REFERENCES:\n";
	foreach my $refID ('lor:ber:sie:taf:fla:sta:hof:2011','the:jan:gie:2010','tur:mat:2009','mat:dis:chi:schroe:zuk:tur:2004','the:ree:gie:2008') {
		last if ($refID eq $References::ORDER[$#References::ORDER]);
		$HELP .= References::printReference($refID);
	}
	$HELP .= "CITATION:\n    If you use this program in your work you might want to cite:\n\n";
	foreach my $refID ('jan:gie:2014') {
		$HELP .= References::printReference($refID);
	}

	print $HELP;
	exit(0);
}

