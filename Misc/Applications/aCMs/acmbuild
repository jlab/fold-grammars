#!/usr/bin/env perl

my $PROGID = 'acmbuild';

sub getPath {
	my ($url) = @_;
	my @parts = split(m|/|, $url);
	pop @parts;
	unshift @parts, "./" if (@parts == 0);
	return join('/', @parts).'/';
}

use lib getPath($0)."../lib/";

use strict;
use warnings;
use Data::Dumper;
use Getopt::Long;
use foldGrammars::Utils;
use foldGrammars::Settings;
use foldGrammars::CMs;
use POSIX 'isatty';
use aCMs::Priors;
use aCMs::cmUtils;
use aCMs::Nullmodel;
use aCMs::Weights;
use aCMs::EM;

our @ALLMODES = ($Settings::MODE_ACM);
@References::ORDER = ();

my %PARAM;
$PARAM{mode} = {modes => \@ALLMODES, key => 'mode', type => 's', default => $Settings::MODE_ACM, info => "Select the computation mode. Available modes are \"".join('", "', @ALLMODES)."\". Omit the ticks on input.\nDefault is \"@(DEFAULT)\"."};
$PARAM{help} = {modes => \@ALLMODES, key => 'help', default => undef, info => "show this brief help on version and usage"};
$PARAM{binarypath} = {modes => \@ALLMODES, key => 'binPath', type => 's', default => undef, info => $Settings::PROGINFOS{$PROGID}->{name}." expects that according Bellman's GAP compiled binaries are located in the same directory as the Perl wrapper is. Should you moved them into another directory, you must set --@(binarypath) to this new location!"};
$PARAM{binaryprefix} = {modes => \@ALLMODES, key => 'binPrefix', type => 's', default => $Settings::PROGINFOS{$PROGID}->{name}.'_', info => $Settings::PROGINFOS{$PROGID}->{name}." expects a special naming schema for the according Bellman's GAP compiled binaries. The binary name is composed of three to four components:\n  1) the program prefix (on default \"@(DEFAULT)\"),\n  2) the mode,\n  3) the used grammar,\n  4) optionally, the word \"window\" if you activate window computation.\nThus, for non-window mode \"$Settings::MODE_ACM\", with grammar \"\" and \"mis\" representation, the name would be \"@(DEFAULT)"."\".\nWith --@(binaryprefix) you can change the prefix into some arbitary one."};
$PARAM{verbose} = {modes => \@ALLMODES, key => 'verbose', default => 0, type => 'i', info => "Prints the actual command for Bellman's GAP binary."};
$PARAM{iins} = {modes => \@ALLMODES, key => 'iins', default => 0, type => 'i', info => "Allow informative insert emissions, do not zero them. Default is \"@(DEFAULT)\"."};
$PARAM{wbeta} = {modes => \@ALLMODES, key => 'Wbeta', default => 0.0000001, type => 'f', info => "Set tail loss prob for calc'ing W (max size of a hit) to Wbeta. Default is \"@(DEFAULT)\"."};
$PARAM{gapthresh} = {modes => \@ALLMODES, key => 'gapthresh', default => 0.5, type => 'f', info => "Fraction of gaps to allow in a consensus column [0..1]. Default is \"@(DEFAULT)\"."};
$PARAM{gscweights} = {modes => \@ALLMODES, key => 'GSCweights', default => 1, type => 'i', info => "Gerstein/Sonnhammer/Chothia tree weights. Default is \"@(DEFAULT)\"."};
$PARAM{em} = {modes => \@ALLMODES, key => 'EM', default => 1, type => 'i', info => "Adjust eff seq # to achieve relative entropy target. Default is \"@(DEFAULT)\"."};
$PARAM{ere} = {modes => \@ALLMODES, key => 'ere', default => 0.59, type => 'f', info => "For --eent: set CM target relative entropy to <x>  (x>0). Default is \"@(DEFAULT)\"."};
$PARAM{eX} = {modes => \@ALLMODES, key => 'eX', default => 6.0, type => 'f', info => "For --eent: set minimum total rel ent param to <x>. Default is \"@(DEFAULT)\"."};
$PARAM{null} = {modes => \@ALLMODES, key => 'null', default => undef, type => 's', info => "Read null (random sequence) model from file <s>."};
$PARAM{prior} = {modes => \@ALLMODES, key => 'prior', default => undef, type => 's', info => "Read priors from file <f>."};
$PARAM{elself} = {modes => \@ALLMODES, key => 'elself', default => 0.94, type => 'f', info => "set EL self transition prob to <x>. Default is \"@(DEFAULT)\"."};
$PARAM{name} = {modes => \@ALLMODES, key => 'name', default => undef, type => 's', info => "overrides the RNA family name given in the stockholm input file."};
$PARAM{outputdir} = {modes => \@ALLMODES, key => 'outputDir', default => undef, type => 's', info => "Sets the directory to which generated binary and source code should be saved."};

my $settings = {};
foreach my $param (keys %PARAM) {
	$settings->{$param} = $PARAM{$param}->{default};
}
my %help = ();
foreach my $param (keys %PARAM) {
	my $optionSec = $PARAM{$param}->{key};
	$optionSec .= "=".$PARAM{$param}->{type} if (exists $PARAM{$param}->{type});
	$help{$optionSec} = \$settings->{$param};
}
&GetOptions( 	
	%help
);

if (not (defined $settings->{'prior'})) {
	my $path = $Settings::prototypeDirectory.$Settings::fileseparater.'nilPairOpen.priors';
	$path =~ s|/fold-grammars/|/aCMs/|;
	$settings->{'prior'} = $path if (-e $path);
}
checkParameters($settings, \%PARAM);

usage() if (defined $settings->{'help'}); #user asks for help --> print usage and die
our $inputIndex = 0;

#precomputations
my %priors = %{cmUtils::readPriorFile($settings->{'prior'})} if (defined $settings->{'prior'});
my %nullmodel = %{Nullmodel::defaultNullmodel()};
%nullmodel = %{Nullmodel::readNullmodelFile($settings->{'null'})} if ((defined $settings->{'null'}) && ($settings->{'null'} ne ''));

if (@ARGV == 0) {
	#input not given via command line parameter
	if (isatty(*STDIN)) {
		#we are somehow in an interactive mode
			#expecting a sequence or a filename
			print "Please tell me a filename of one or more stockholm formated RNA families.\n";
			my $input = <STDIN>; chomp $input;
			if (-e $input) {
				#since there is a file, having the name of the user input it is very likely that we really should read from a file
				processInput($input, $settings, \%priors, \%nullmodel);
			} else {
				#otherwise, we assume it is a single, plain RNA sequence
				die "Cannot read file '$input', does is really exist?\n";
			}
	} else {
		#input must be delivered via pipe
		processInput(\*STDIN, $settings, \%priors, \%nullmodel);
	}
} elsif (@ARGV == 1) {
	#rna sequence, secondary structure or filename, given as command line parameter
	if (-e $ARGV[0]) {
		#since there is a file, having the name of the user input it is very likely that we really should read from a file
		processInput($ARGV[0], $settings, \%priors, \%nullmodel);
	} else {
		die "cannot read file '".$ARGV[0].", does is really exist?\n";
	}
} else {
	print STDERR "You gave me too many inputs. Please ask for help, via \"".$Settings::PROGINFOS{$PROGID}->{name}." --".$PARAM{help}->{key}."\".\n";
	exit(1);
}

sub processInput {
	my ($input, $refHash_settings, $refHash_priors, $refHash_nullmodel) = @_;
	
	if (ref($input) =~ m/GLOB/) {
		#input is STDIN
		CMs::applyFunctionToStockholmFile(\*STDIN, \&doComputation, $refHash_settings, $refHash_priors, $refHash_nullmodel);
	} else {
		#input is a filename
		die "The file '$input' does not exist!\n" if (not -e $input);
		CMs::applyFunctionToStockholmFile($input, \&doComputation, $refHash_settings, $refHash_priors, $refHash_nullmodel);
	}
}

sub doComputation {
	my $VERBOSE = 1;
	my $taskCount = 1;
	
	my ($refHash_family, $settings, $refHash_priors, $refHash_nullmodel) = @_;

	$refHash_family->{familyname} = $settings->{name} if ((defined $settings->{name}) && ($settings->{name} ne ''));
	my $currentDir = Utils::execute(Settings::getBinary('pwd')); chomp $currentDir;
	#~ my $tmpDir = '/tmp/tmp.SBZEaP52Dr/';
	my $tmpDir = Utils::execute(Settings::getBinary('mktemp')." -d"); chomp $tmpDir;
	print STDERR "Training and building an ambivalent covariance model for family '".$refHash_family->{familyname}."':\n" if ($VERBOSE);
	print STDERR "  (temporary directory is '$tmpDir'.)\n" if ($VERBOSE);

	#an alignment column might have so few bases, i.e. so many gaps, that we prefere to model this column as an insertion rather than as a match. We can set the ratio of character and gaps via the GAPTHRESH parameter. Care must be taken if one partner of a basepair gets transformed!
		print STDERR "  ".($taskCount++)." determining multiple consensus structures ..." if ($VERBOSE);
		my %matchConsensi = %{cmUtils::markMatchColumns($refHash_family, $settings->{gapthresh})};
		my @consensiOrdering = ();
		foreach my $key (sort {$refHash_family->{originalSSconsOrdering}->{$a} <=> $refHash_family->{originalSSconsOrdering}->{$b}} keys(%{$refHash_family->{originalSSconsOrdering}})) {
			push @consensiOrdering, cmUtils::getAltID($key);
		}
		my $alignmentLength = length($matchConsensi{$consensiOrdering[0]});
		print STDERR " done.\n" if ($VERBOSE);
		
	#checking consensus structures for compatibility
		if (keys(%matchConsensi) > 1) {
			print STDERR "  ".($taskCount++)." checking consensus structures for compatibility:\n" if ($VERBOSE);
			for (my $i = 0; $i < @consensiOrdering; $i++) {
				for (my $j = $i+1; $j < @consensiOrdering; $j++) {
					print STDERR "      ".substr($consensiOrdering[$i], 0, 20)." <-> ".substr($consensiOrdering[$j], 0, 20).": " if ($VERBOSE);
					if (length($matchConsensi{$consensiOrdering[$i]}) != length($matchConsensi{$consensiOrdering[$j]})) {
						if ($VERBOSE) {
							print STDERR "error: lengths differ!\n";
						} else {
							print STDERR "consensus structures for '".$consensiOrdering[$i]."' and '".$consensiOrdering[$j]."' have different lengths. This means, they cannot be part of the same alignment. We cannot continue computation until you correct your input family.\n";
						}
						exit (1);
					}
					my @checkCompatibility_result = split(m/\n/, Utils::execute(buildCommand($settings, undef, 'checkCompatibility').' -- "'.mixConsensusStructures($matchConsensi{$consensiOrdering[$i]}, $matchConsensi{$consensiOrdering[$j]}).'"'));
					if ($checkCompatibility_result[1] =~ m/^\s*1\s*$/) {
						print STDERR "compatible.\n";
					} else {
						if ($VERBOSE) {
							print STDERR "error: incompatible!\n";
						} else {
							print STDERR "consensus structures for '".$consensiOrdering[$i]."' and '".$consensiOrdering[$j]."' are incompatible. Please correct your input and try again.\n";
						}
						exit (1);
					}
				}
			}
			print STDERR "    done.\n" if ($VERBOSE);
		} else {
			print STDERR "  ".($taskCount++)." skipping check for compatibility since there is only one consensus structure.\n" if ($VERBOSE);
		}

	#generate GAP code to train the stochastic parameters
		print STDERR "  ".($taskCount++)." compiling bgap binary for two-track-training ..." if ($VERBOSE);
		my $trainBinaryFilename = $tmpDir.'/'.$PROGID.'_train_'.$refHash_family->{familyname};
		my $concatConsensi;
		foreach my $id (@consensiOrdering) { $concatConsensi .= "'".'("'.$id.'","'.$matchConsensi{$id}.'")'."' "; }
		my $trainBuildCmd = buildCommand($settings, {header => undef, sequence => $concatConsensi}, 'trainbuild');
		my $trainGAP = Utils::execute("$trainBuildCmd 2>&1");
		my %nodeLists = ();
		my %trees = ();
		my $idIndex = 0;
		foreach my $line (split(m/\n/, $trainGAP)) {
			if ($line =~ m/^\s*(.+?):\s+\S+?\s+\(as tree: '(.+?)'/) {
				my ($ssConsName, $tree) = ($1,$2);
				$trees{$ssConsName} = cmUtils::parseGTenum($tree);
				$nodeLists{$ssConsName} = cmUtils::gt2nodelist($trees{$ssConsName});
			}
		}

		if (not -e $trainBinaryFilename) {
			my $gapfilename = $tmpDir.'/'.$PROGID.'_train_'.$refHash_family->{familyname}.'.gap';
			open (OUT, "> ".$gapfilename) || die "cannot write gap source code to '$gapfilename': $!";
				print OUT $trainGAP;
			close (OUT);
			my $cmd = "ln -s ".Utils::absFilename(getPath($0))."../include/isntimes.hh $tmpDir/";
			Utils::execute($cmd);
			chdir($tmpDir);
			$cmd = Settings::getBinary('gapc')." --tab-all -p \"alg_fake * alg_parse\" --kbacktrace $gapfilename -o ${PROGID}_train.cc"; 
			Utils::execute($cmd);
			$cmd = Settings::getBinary('make')." -f ${PROGID}_train.mf CXXFLAGS_EXTRA=\"-I ".Utils::absFilename(getPath($0))."/../include/\"";
			Utils::execute($cmd);
			Utils::execute(Settings::getBinary('mv')." ".$PROGID."_train ".$trainBinaryFilename);
			$cmd =  Settings::getBinary('rm')." -f string.*";
			Utils::execute($cmd);
			chdir($currentDir);
			print STDERR " done.\n" if ($VERBOSE);
		} else {
			print STDERR " using existing one.\n" if ($VERBOSE);
		}

	#integrate different sequence weights
		print STDERR "  ".($taskCount++)." sequence weighting ..." if ($VERBOSE);
		my $refHash_sequenceWeights = undef;
		my $exampleSequence = undef;
		if ($settings->{gscweights}) {
			my %sequenceGroups = ();
			foreach my $id (keys(%{$refHash_family->{sequences}})) {
				my $altID = cmUtils::getAltID($id);
				$sequenceGroups{$altID}->{sequences}->{$id} = $refHash_family->{sequences}->{$id};
				$exampleSequence = $refHash_family->{sequences}->{$id} if (not defined $exampleSequence);
				$sequenceGroups{$altID}->{originalSequenceOrdering}->{$id} = $refHash_family->{originalSequenceOrdering}->{$id};
			}
			foreach my $id (keys(%sequenceGroups)) {
				$refHash_sequenceWeights->{$id} = Weights::getUPGMAweights($sequenceGroups{$id});
			}
		} else {
			foreach my $id (keys(%{$refHash_family->{sequences}})) {
				my $altID = cmUtils::getAltID($id);
				$refHash_sequenceWeights->{$altID}->{$id} = 1.0;
			}
		}
		print STDERR " done.\n" if ($VERBOSE);

	#train with sequences from the alignment
		print STDERR "  ".($taskCount++)." train with ".scalar(keys(%{$refHash_family->{sequences}}))." sequences: " if ($VERBOSE);
		my %counts_transitions = ();
		my %counts_emissions = ();
		foreach my $seqID (keys(%{$refHash_family->{sequences}})) {
			print STDERR ".";
			my $altID = cmUtils::getAltID($seqID);
			my $mix = cmUtils::getTrainSeqStruct($refHash_family->{sequences}->{$seqID}, $matchConsensi{$altID});
			my $cmd = "$trainBinaryFilename -- \"$mix\"";
			my $gapres = Utils::execute($cmd);
			cmUtils::parseTrainEnum($gapres, \%counts_transitions, \%counts_emissions, $seqID, $altID);
		}
		print STDERR " done.\n" if ($VERBOSE);

	#Expectation Maximization
		print STDERR "  ".($taskCount++)." Expectation Maximization: " if ($VERBOSE);
		if ($settings->{'em'}) {
			print STDERR "yes ... " if ($VERBOSE);
			foreach my $altID (keys(%trees)) {
				my $effNseq = scalar(keys(%{$refHash_sequenceWeights->{$altID}}));
				print STDERR "('".$altID."': n=".$effNseq." -> ";
				$effNseq = cmUtils::getRootByBisection_NilPairOpen({'dummy' => $counts_emissions{$altID}}, {'dummy' => $trees{$altID}}, $effNseq, {'dummy' => $refHash_sequenceWeights->{$altID}}, $refHash_priors, $refHash_nullmodel, $settings);
				print STDERR $effNseq.") ";
				$refHash_sequenceWeights->{$altID} = EM::rescaleWeights($refHash_sequenceWeights->{$altID}, $effNseq);
			}
		} else {
			print STDERR "no " if ($VERBOSE);
		}
		print STDERR "done.\n" if ($VERBOSE);
		
	#weight sequences
		my ($refT, $refE) = @{cmUtils::weightCounts(\%counts_transitions, \%counts_emissions, $refHash_sequenceWeights, $settings)};
		my %weighted_transitions = %{$refT};
		my %weighted_emissions = %{$refE};

	#priorize
		print STDERR "  ".($taskCount++)." priorize: " if ($VERBOSE);
		if (%{$refHash_priors}) {
			print STDERR "yes ... " if ($VERBOSE);
			my ($refTp, $refEp) = @{cmUtils::priorize(\%weighted_transitions, \%weighted_emissions, $refHash_priors, $refHash_nullmodel, $settings, \%trees)};
			%weighted_transitions = %{$refTp};
			%weighted_emissions = %{$refEp};
			print STDERR "done.\n" if ($VERBOSE);
		} else {
			print STDERR "no.\n" if ($VERBOSE);
		}

	#move all necessary files into a temporary directory to compile there without race conditions the Haskell-ADP generator with correct Probs.lhs, i.e. probabilities.
		my $outputDirectory = $currentDir.$Settings::fileseparater;
		$outputDirectory = $settings->{'outputdir'}.$Settings::fileseparater if (defined $settings->{'outputdir'});
		my $targetBinary = 'acmsearch_'.$refHash_family->{familyname};
		my $outputFile = $outputDirectory.$Settings::fileseparater.$targetBinary;
		print STDERR "  ".($taskCount++)." compiling final bgap program '$targetBinary' ..." if ($VERBOSE);
		if (! -e $targetBinary) {
			my $buildBinary = $tmpDir.'/'.$PROGID.'_build_'.$refHash_family->{familyname};
			my $probFilename = 'acmsearch_'.$refHash_family->{familyname}."_probabilities.hh";
			if (not -e $buildBinary) {
				open (PROBS, "> ".$tmpDir.$Settings::fileseparater.$probFilename) || die "can't write to '".$tmpDir.$Settings::fileseparater.$probFilename."'\n";
					print PROBS cmUtils::generateCppProbMaps(\%weighted_transitions, \%weighted_emissions, $refHash_family->{familyname});
				close (PROBS);
				Utils::execute(Settings::getBinary('ghc')." -tmpdir ".$tmpDir."/ -O -odir ".$tmpDir." -i".$tmpDir.":".getPath($0)."../lib/aCMs/ -hidir ".$tmpDir." --make ".getPath($0)."../lib/aCMs/mcmbuild.lhs -o ".$buildBinary);
				Utils::execute(Settings::getBinary('cp')." ".$tmpDir.$Settings::fileseparater.$probFilename." ".$outputDirectory);
			}
			my $cmd = "$buildBinary $concatConsensi";
			my $buildGAP = Utils::execute($cmd);
			my $targetGapFile = $outputFile.'.gap';
			open (OUT, "> ".$targetGapFile) || die "cannot write gap source code to '".$targetGapFile."': $!";
				$buildGAP =~ s/import probabilities/import "$probFilename"/;
				print OUT $buildGAP;
			close (OUT);
			Utils::execute(Settings::getBinary('cp')." $targetGapFile $tmpDir/");
			chdir($tmpDir);
			Utils::execute(Settings::getBinary('gapc')." --tab-all -i cykali --kbacktrace --no-coopt $targetGapFile -o acmsearch.cc");
			Utils::execute(Settings::getBinary('make')." -f acmsearch.mf CXXFLAGS_EXTRA=\"-I ".Utils::absFilename(getPath($0))."/../include/"."\"");
			Utils::execute(Settings::getBinary('rm')." -f string.*");
			Utils::execute(Settings::getBinary('cp')." acmsearch $outputFile");
			print STDERR " done.\n" if ($VERBOSE);
		} else {
			print STDERR " using existing one.\n" if ($VERBOSE);
		}
		
	#remove temp directory
		chdir($currentDir);
		Utils::execute(Settings::getBinary('rm')." -rf $tmpDir") if (!$settings->{verbose});
		
	$exampleSequence =~ s/\.//g;
	$exampleSequence =~ s/t/u/gi;
	print "sucessfully compiled '".$outputFile."'\nuse it like \"".$outputFile." ".uc($exampleSequence)."\"\nHowever, we strongly suggest to use the Perl wrapper acmsearch for a more pretty output and FASTA parsing capabilities, e.g.\n  acmsearch ".$outputFile." \"".$exampleSequence."\"\n" if ($VERBOSE);
		
	return undef;
}

sub buildCommand {
	my ($settings, $refHash_sequence, $task) = @_;

	my $cmd = "";
	$cmd .= $settings->{'binarypath'};
	$cmd .= "/" if (substr($cmd, -1, 1) ne "/");
	$cmd .= $settings->{'binaryprefix'};
	if ($task eq 'trainbuild') {
		$cmd .= 'train';
		$cmd .= ' '.$refHash_sequence->{sequence};
	}
	if ($task eq 'checkCompatibility') {
		$cmd .= 'checkCompatibility';
	}
		
	return $cmd;
}

sub checkParameters {
	my ($settings, $refHash_params) = @_;

	my $diePrefix = "wrong command line parameter:\n  ";

	die $diePrefix."--".$PARAM{'prior'}->{key}.": file does not exists. You can provide the filename to a prior file via the parameter '--".$PARAM{'prior'}->{key}."'.\n" if ((not defined $settings->{'prior'}) || (not -e $settings->{'prior'}));
	die $diePrefix."--".$PARAM{'null'}->{key}." file '".$settings->{'null'}."' does not exists.\n" if ((defined $settings->{'null'}) && (not -e $settings->{'null'}));
	
	if (defined $settings->{'outputdir'}) {
		$settings->{'outputdir'} = Utils::absFilename($settings->{'outputdir'}).$Settings::fileseparater;
		die $diePrefix."--".$PARAM{'outputdir'}->{key}.": output directory does not exist. Either give me another directory or create the given one.\n" if (!-d $settings->{'outputdir'});
		die $diePrefix."--".$PARAM{'outputdir'}->{key}.": cannot write to output directory. Either give me another directory or make it writeable.\n" if (!-w $settings->{'outputdir'});
	}

	Utils::automatedParameterChecks(\%PARAM, $settings, \@ALLMODES, $diePrefix);
	Utils::checkBinaryPresents($settings, $diePrefix, [$Settings::MODE_ACM], ['train'], $refHash_params);
}

sub usage {
	my ($settings) = @_;

my $HELP = <<EOF;
# $Settings::PROGINFOS{$PROGID}->{name}: Construction of ambivalent covariance models
#            version $Settings::PROGINFOS{$PROGID}->{version} ($Settings::PROGINFOS{$PROGID}->{date})
#            Stefan Janssen (bibi-help\@techfak.uni-bielefeld.de)
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

USAGE: 
perl $Settings::PROGINFOS{$PROGID}->{name} [-options] <stockholm file>

EOF
;
	
	my @paramGroups = ();
	push @paramGroups, {name => 'GENERAL OPTIONS', elements => ['iins','wbeta','name']};
	push @paramGroups, {name => 'EXPERT MODEL CONSTRUCTION OPTIONS', elements => ['gapthresh']};
	push @paramGroups, {name => 'SEQUENCE WEIGHTING OPTIONS', elements => ['gscweights']};
	push @paramGroups, {name => 'EFFECTIVE SEQUENCE NUMBER RELATED OPTIONS', elements => ['em','ere','eX']};
	push @paramGroups, {name => 'CUSTOMIZATION OF NULL MODEL AND PRIORS', elements => ['null','prior']};
	push @paramGroups, {name => 'UNDOCUMENTED DEVELOPER OPTIONS FOR DEBUGGING, EXPERIMENTATION', elements => ['elself']};
	push @paramGroups, {name => 'SYSTEM OPTIONS', elements => ['binarypath','binaryprefix','help','verbose','outputdir']};
	foreach my $refHash_group (@paramGroups) {
		$HELP .= $refHash_group->{name}.":\n";
		for my $par (@{$refHash_group->{elements}}) {
			$HELP .= Utils::printParamUsage($PARAM{$par}, \%PARAM, \@ALLMODES)."\n";
		}
	}
	
	#~ $HELP .= "REFERENCES:\n";
	#~ foreach my $refID ('lor:ber:sie:taf:fla:sta:hof:2011','gru:lor:ber:neu:hof:2008','mat:dis:chi:schroe:zuk:tur:2004','tur:mat:2009','jan:schud:ste:gie:2011','jan:gie:2010','voss:gie:reh:2006','ree:gie:2005','ste:voss:reh:ree:gie:2006','mcc:1990') {
		#~ $HELP .= References::printReference($refID);
	#~ }
	#~ $HELP .= "CITATION:\n    If you use this program in your work you might want to cite:\n\n";
	#~ foreach my $refID ('gie:voss:reh:2004') {
		#~ $HELP .= References::printReference($refID);
	#~ }

	print $HELP;
	exit(0);
}

sub mixConsensusStructures {
	my ($ss_a, $ss_b) = @_;
	
	if (length($ss_a) != length($ss_b)) {
		print STDERR "Consensus structures have different lenghts. They cannot be part of one alignment!\n";
		exit(1);
	}
	my $mix = "";
	for (my $i = 0; $i < length($ss_a); $i++) {
		$mix .= substr($ss_a,$i,1).substr($ss_b,$i,1);
	}
	
	return $mix;
}